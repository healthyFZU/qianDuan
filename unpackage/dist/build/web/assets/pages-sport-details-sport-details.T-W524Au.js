import{T as e,v as s,U as t,t as r,b as o,w as a,F as i,x as c,H as l,f as n,l as d,a as u,e as m}from"./index-DD8SDI5w.js";import{a as h}from"./axios.CCYSaZn9.js";import{_ as p}from"./background.9mxQRA6f.js";import{_ as y}from"./_plugin-vue_export-helper.BCo6x5W8.js";const f=y({data(){return{caloriesBurned:0,showHistory:!1,historyRecords:[],exercises:[{id:1,name:"瑜伽伸展课程",description:"第一课 | 入门瑜伽伸展",time:6,calories:29},{id:2,name:"初级拳击课程",description:"第一课 | 燃脂拳击初级",time:7,calories:141}],selectedDate:this.formatDate(new Date),measurementId:null,userId:null,accessToken:null}},setup:()=>({store:e()}),mounted(){this.checkDateAndReset(),this.loadExerciseRecords()},methods:{formatDate:e=>e.toISOString().split("T")[0],checkDateAndReset(){const e=localStorage.getItem("lastRecordedDate"),s=this.formatDate(new Date);e!==s?(this.caloriesBurned=0,this.historyRecords=[],this.measurementId=null,localStorage.setItem("lastRecordedDate",s),localStorage.setItem("caloriesBurned",0),console.log("新的一天，创建初始记录...")):(this.caloriesBurned=parseInt(localStorage.getItem("caloriesBurned"))||0,console.log(`加载当天的总热量：${this.caloriesBurned}`),this.loadExerciseRecords())},saveCalories(){localStorage.setItem("caloriesBurned",this.caloriesBurned),console.log(`保存热量到 localStorage：${this.caloriesBurned}`)},async loadExerciseRecords(){const e=this.$store.state.userId,s=this.$store.state.access_token;if(!e||!s)return alert("请先登录！"),void this.$router.push("/pages/login/login");const t=this.selectedDate;try{const r=await h.get(`http://localhost:5000/sports/user/${e}/sports`,{params:{date:t},headers:{Authorization:`Bearer ${s}`}});if(200===r.status){const{sports:e,total_calories:s}=r.data;this.historyRecords=e.map((e=>({id:e.measurement_id,date:e.created_at,name:e.name,calories:e.calories}))),this.caloriesBurned=s}else console.error("加载运动记录失败")}catch(r){console.error("加载运动记录出错：",r),alert("加载运动记录失败，请检查网络连接！")}},async createInitialRecord(){const e=this.$store.state.userId,s=this.$store.state.access_token;if(!e||!s)return alert("请先登录！"),!1;try{const t=await fetch(`http://127.0.0.1:5000/sports/user/${e}/sports`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${s}`},body:JSON.stringify({sports:{name:"初始记录",calories:0}})});if(t.ok){const e=await t.json();return this.measurementId=e.measurement_id,console.log("初始记录创建成功：",e),!0}{const e=await t.json();return console.error("创建初始记录失败：",e),!1}}catch(t){return console.error("创建初始记录失败：",t),!1}},async recordExercise(){const e=this.$store.state.userId,s=this.$store.state.access_token;if(!e||!s)return void alert("请先登录！");const t=prompt("请输入消耗的热量 (千卡):","50");if(!/^\d+$/.test(t))return void alert("请输入一个有效的正整数值！");const r={name:"自定义运动",calories:parseInt(t)};try{const t=await h.post(`http://localhost:5000/api/sports/user/${e}`,{sports:r},{headers:{Authorization:`Bearer ${s}`}});201===t.status?(this.historyRecords.push({id:t.data.measurement_id,date:this.selectedDate,name:r.name,calories:r.calories}),this.caloriesBurned+=r.calories,console.log("已记录运动：",r),alert(`已记录 ${r.name} 的运动，消耗 ${r.calories} 千卡！`)):(console.error("添加运动记录失败"),alert("记录运动失败，请稍后重试！"))}catch(o){console.error("记录运动出错：",o),alert("记录运动失败，请检查网络连接！")}},toggleHistory(){this.showHistory=!this.showHistory},async recordSpecificExercise(e){const s=this.$store.state.userId,t=this.$store.state.access_token;if(s&&t)try{if(!this.measurementId){const e=await h.post(`http://127.0.0.1:5000/sports/user/${s}/sports`,{sports:{name:"初始记录",calories:0}},{headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`}});if(201!==e.status)return console.error("创建初始记录失败"),void alert("无法创建初始记录！");this.measurementId=e.data.measurement_id,console.log("创建新的记录 ID：",this.measurementId)}200===(await h.put(`http://127.0.0.1:5000/sports/user/${s}/sports/${this.measurementId}`,{sports:{name:e.name,calories:e.calories}},{headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`}})).status?(this.historyRecords.push({id:this.measurementId,date:this.selectedDate,name:e.name,calories:e.calories}),this.caloriesBurned+=e.calories,console.log("记录运动成功：",e),alert(`已记录 ${e.name} 的运动，消耗 ${e.calories} 千卡！`)):(console.error("记录运动失败"),alert("记录运动失败，请稍后重试！"))}catch(r){console.error("记录运动出错：",r),alert("记录运动失败，请检查网络连接！")}else alert("请先登录！")},updateRecommendations(){this.exercises=[{id:3,name:"跑步",description:"有氧跑步训练",time:30,calories:250},{id:4,name:"高强度间歇训练",description:"燃脂 HIIT 训练",time:20,calories:300}],alert("推荐运动已更新！")}}},[["render",function(e,h,y,f,g,$){const I=n,k=d;return u(),s("div",{class:"exercise-record"},[t("div",{class:"main-image"},[t("img",{src:p,alt:"logo",class:"background-image"})]),t("header",{class:"header"}),t("section",{class:"today-summary"},[t("div",{class:"date-section"},[t("h3",null,r(g.selectedDate),1),o(I,{onClick:$.toggleHistory},{default:a((()=>[m("📅")])),_:1},8,["onClick"])]),t("div",{class:"summary-info"},[t("div",{class:"today-exercise"},[t("p",null,"今日运动"),o(k,{class:"button1",onClick:$.recordExercise},{default:a((()=>[m("+")])),_:1},8,["onClick"])]),t("div",{class:"calories"},[t("p",null,"热量消耗"),t("p",null,r(g.caloriesBurned)+" 千卡",1)])]),t("p",{class:"tip"}," 温馨提示：合理安排饮食和运动时间。建议饭后2小时后运动，运动结束1小时后再进食。 ")]),g.showHistory?(u(),s("section",{key:0,class:"history-records"},[o(I,{style:{"font-size":"18px"}},{default:a((()=>[m("历史运动记录")])),_:1}),t("ul",null,[(u(!0),s(i,null,c(g.historyRecords,((e,t)=>(u(),s("li",{key:e.id},r(e.date)+" - "+r(e.name)+" - "+r(e.calories)+" 千卡 ",1)))),128))])])):l("",!0),t("section",{class:"recommended-exercises"},[o(I,{style:{"font-size":"18px"}},{default:a((()=>[m("推荐运动")])),_:1}),(u(!0),s(i,null,c(g.exercises,(e=>(u(),s("div",{key:e.id,class:"exercise-card"},[t("p",null,r(e.name),1),t("p",null,r(e.description),1),t("p",null,r(e.time)+" 分钟 - "+r(e.calories)+" 千卡",1),o(k,{class:"button2",onClick:s=>$.recordSpecificExercise(e)},{default:a((()=>[m("+")])),_:2},1032,["onClick"])])))),128)),o(I,{onClick:$.updateRecommendations,style:{display:"block","margin-left":"120px",cursor:"pointer"}},{default:a((()=>[m("🔄 换一下")])),_:1},8,["onClick"])])])}],["__scopeId","data-v-448c1931"]]);export{f as default};
